openapi: 3.0.2
info:
  title: ITA21
  version: 1.0.0
  description: Demonstration API
paths:
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `Session` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `Session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      tags:
        - /sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                Session:
                  value:
                    sessionId: 841959fa-b0b9-4185-8673-1531c59cd6c9
          description: Successful sign in.
      operationId: createSession
      summary: Create a Session
      description: Creates a new instance of a `Session`.
    delete:
      tags:
        - /sessions
      responses:
        '204':
          description: Successful signout
      security:
        -
          Bearer: []
      summary: Destroy a session
      description: 'Destorys a `Session`, effectively signing out.'
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list and create zero or more `User` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `User` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      tags:
        - /users
      responses:
        '201':
          description: Successful response.
        '400':
          content:
            text/html:
              examples:
                Email must be in correct format and password must be at least 8 characters:
                  value: >
                    Email must be in correct format and password must be at least 8
                    characters
          description: Bad Request
        '409':
          content:
            text/html:
              examples:
                User already exists:
                  value: User already exists
          description: User already exists
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of a `User`.
  /consultations:
    summary: Path used to manage the list of consultations.
    description: >-
      The REST endpoint/path used to list and create zero or more `Consultation` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - /consultations
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consultation'
          description: Successful response - returns an array of `Consultation` entities.
        '401':
          content:
            text/html:
              examples:
                User not found:
                  value: User not found
                Invalid session:
                  value: Invalid session
                Session ID is required:
                  value: Session ID is required
                'Authorization header format must be "Bearer {token}"':
                  value: 'Authorization header format must be "Bearer {token}"'
                Authorization header is required:
                  value: Authorization header is required
          description: Unauthorized
      security:
        -
          Bearer: []
      operationId: getConsultations
      summary: List All Consultations
      description: Gets a list of all `Consultation` entities.
components:
  schemas:
    Credentials:
      title: Root Type for Credentials
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: admin@example.com
        password: '12341234'
    Session:
      title: Root Type for Session
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: admin@admin.com
        password: admin
    User:
      title: Root Type for User
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: henno@hot.ee
        password: mylittlesecret
    Consultation:
      title: Root Type for Consultation
      description: ''
      type: object
      properties:
        id:
          format: int32
          type: integer
        userId:
          format: int32
          type: integer
        date:
          format: date
          type: string
        issue:
          type: string
      example:
        id: 1
        userId: 1
        date: '2021-01-01'
        issue: Headache
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
tags:
  -
    name: /sessions
    description: Operations with sessions
  -
    name: /users
    description: ''
  -
    name: /consultations
    description: ''
